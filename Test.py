import os
import numpy as np
from xml.dom import minidom
from tkinter import Tk
from tkinter.filedialog import askopenfilename, askdirectory

def get_filename():
    Tk().withdraw()
    filename = askopenfilename()
    return filename

filename = get_filename()
data = np.genfromtxt(filename, delimiter = ',')
#Add smtn to filter out any empty cells

xml_file = minidom.Document()
physicell_settings = xml_file.createElement('PhysiCell_settings')
xml_file.appendChild(physicell_settings)

#1) Domain
domain = xml_file.createElement('domain')
x_min = xml_file.createElement('x_min')
#x_min.appendChild(xml_file.createTextNode('-300'))
domain.appendChild(x_min)
x_max = xml_file.createElement('x_max')
#x_max.appendChild(xml_file.createTextNode('800'))
domain.appendChild(x_max)
y_min = xml_file.createElement('y_min')
#y_min.appendChild(xml_file.createTextNode('0'))
domain.appendChild(y_min)
y_max = xml_file.createElement('y_max')
#y_max.appendChild(xml_file.createTextNode('800'))
domain.appendChild(y_max)
z_min = xml_file.createElement('z_min')
#z_min.appendChild(xml_file.createTextNode('0'))
domain.appendChild(z_min)
z_max = xml_file.createElement('z_max')
#z_max.appendChild(xml_file.createTextNode('800'))
domain.appendChild(z_max)
dx = xml_file.createElement('dx')
dx.appendChild(xml_file.createTextNode('20'))
domain.appendChild(dx)
dy = xml_file.createElement('dy')
dy.appendChild(xml_file.createTextNode('20'))
domain.appendChild(dy)
dz = xml_file.createElement('dz')
dz.appendChild(xml_file.createTextNode('20'))
domain.appendChild(dz)
use_2D = xml_file.createElement('use_2D')
use_2D.appendChild(xml_file.createTextNode('false'))
domain.appendChild(use_2D)
physicell_settings.appendChild(domain)

#2) Overall
overall = xml_file.createElement('overall')
max_time = xml_file.createElement('max_time')
max_time.setAttribute('units','min')
max_time.appendChild(xml_file.createTextNode('1440'))
overall.appendChild(max_time)
time_units = xml_file.createElement('time_units')
time_units.appendChild(xml_file.createTextNode('min'))
overall.appendChild(time_units)
space_units = xml_file.createElement('space_units')
space_units.appendChild(xml_file.createTextNode('micron'))
overall.appendChild(space_units)
dt_diffusion = xml_file.createElement('dt_diffusion')
dt_diffusion.setAttribute('units','min')
dt_diffusion.appendChild(xml_file.createTextNode('0.01'))
overall.appendChild(dt_diffusion)
dt_mechanics = xml_file.createElement('dt_mechanics')
dt_mechanics.setAttribute('units','min')
dt_mechanics.appendChild(xml_file.createTextNode('0.1'))
overall.appendChild(dt_mechanics)
dt_phenotype = xml_file.createElement('dt_phenotype')
dt_phenotype.setAttribute('units','min')
dt_phenotype.appendChild(xml_file.createTextNode('6'))
overall.appendChild(dt_phenotype)
physicell_settings.appendChild(overall)

#3) Parallel
parallel = xml_file.createElement('parallel')
omp_num_threads = xml_file.createElement('omp_num_threads')
omp_num_threads.appendChild(xml_file.createTextNode('1'))
parallel.appendChild(omp_num_threads)
physicell_settings.appendChild(parallel)

#4) Save
save = xml_file.createElement('save')
folder = xml_file.createElement('folder')
folder.appendChild(xml_file.createTextNode('output'))
save.appendChild(folder)
# Save > full data
full_data = xml_file.createElement('full_data')
interval = xml_file.createElement('interval')
interval.setAttribute('units','min')
interval.appendChild(xml_file.createTextNode('30'))
full_data.appendChild(interval)
enable = xml_file.createElement('enable')
enable.appendChild(xml_file.createTextNode('true'))
full_data.appendChild(enable)
save.appendChild(full_data)
# Save > SVG
SVG = xml_file.createElement('SVG')
interval1 = xml_file.createElement('interval')
interval1.setAttribute('units','min')
interval1.appendChild(xml_file.createTextNode('30'))
SVG.appendChild(interval1)
enable0 = xml_file.createElement('enable')
enable0.appendChild(xml_file.createTextNode('true'))
SVG.appendChild(enable0)
save.appendChild(SVG)
# Save > Legacy Data
legacy_data = xml_file.createElement('legacy_data')
enable1 = xml_file.createElement('enable')
enable1.appendChild(xml_file.createTextNode('false'))
legacy_data.appendChild(enable1)
save.appendChild(legacy_data)
physicell_settings.appendChild(save)

#5) Options
options = xml_file.createElement('options')
legacy_random_points_on_sphere_in_divide = xml_file.createElement('legacy_random_points_on_sphere_in_divide')
legacy_random_points_on_sphere_in_divide.appendChild(xml_file.createTextNode('false'))
options.appendChild(legacy_random_points_on_sphere_in_divide)
virtual_wall_at_domain_edge = xml_file.createElement('virtual_wall_at_domain_edge')
virtual_wall_at_domain_edge.appendChild(xml_file.createTextNode('true'))
options.appendChild(virtual_wall_at_domain_edge)
physicell_settings.appendChild(options)

#6) Microenvironment Setup
microenvironment_setup = xml_file.createElement('microenvironment_setup')
# Microenvironment Setup > Variable
variable = xml_file.createElement('variable')
variable.setAttribute('name','oxygen')
variable.setAttribute('units','dimensionless')
variable.setAttribute('ID','0')
# Microenvironment Setup > Variable > Physical Parameter Set
physical_parameter_set = xml_file.createElement('physical_parameter_set')
diffusion_coefficient = xml_file.createElement('diffusion_coefficient')
diffusion_coefficient.setAttribute('units','micron^2/min')
diffusion_coefficient.appendChild(xml_file.createTextNode('1.0'))
physical_parameter_set.appendChild(diffusion_coefficient)
decay_rate = xml_file.createElement('decay_rate')
decay_rate.setAttribute('units','1/min')
decay_rate.appendChild(xml_file.createTextNode('0'))
physical_parameter_set.appendChild(decay_rate)
variable.appendChild(physical_parameter_set)
initial_condition = xml_file.createElement('initial_condition')
initial_condition.setAttribute('units','mmHg')
initial_condition.appendChild(xml_file.createTextNode('0'))
variable.appendChild(initial_condition)
Dirichlet_boundary_condition = xml_file.createElement('Dirichlet_boundary_condition')
Dirichlet_boundary_condition.setAttribute('units','mmHg')
Dirichlet_boundary_condition.setAttribute('enabled','true')
Dirichlet_boundary_condition.appendChild(xml_file.createTextNode('0'))
variable.appendChild(Dirichlet_boundary_condition)
# Microenvironment Setup > Variable  > Dirichlet Options
Dirichlet_options = xml_file.createElement('Dirichlet_options')
boundary_value1 = xml_file.createElement('boundary_value')
boundary_value1.setAttribute('ID','xmin')
boundary_value1.setAttribute('enabled','True')
boundary_value1.appendChild(xml_file.createTextNode('0'))
Dirichlet_options.appendChild(boundary_value1)
boundary_value2 = xml_file.createElement('boundary_value')
boundary_value2.setAttribute('ID','xmax')
boundary_value2.setAttribute('enabled','True')
boundary_value2.appendChild(xml_file.createTextNode('0'))
Dirichlet_options.appendChild(boundary_value2)
boundary_value3 = xml_file.createElement('boundary_value')
boundary_value3.setAttribute('ID','ymin')
boundary_value3.setAttribute('enabled','True')
boundary_value3.appendChild(xml_file.createTextNode('0'))
Dirichlet_options.appendChild(boundary_value3)
boundary_value4 = xml_file.createElement('boundary_value')
boundary_value4.setAttribute('ID','ymax')
boundary_value4.setAttribute('enabled','True')
boundary_value4.appendChild(xml_file.createTextNode('0'))
Dirichlet_options.appendChild(boundary_value4)
boundary_value5 = xml_file.createElement('boundary_value')
boundary_value5.setAttribute('ID','zmin')
boundary_value5.setAttribute('enabled','True')
boundary_value5.appendChild(xml_file.createTextNode('0'))
Dirichlet_options.appendChild(boundary_value5)
boundary_value6 = xml_file.createElement('boundary_value')
boundary_value6.setAttribute('ID','zmax')
boundary_value6.setAttribute('enabled','True')
boundary_value6.appendChild(xml_file.createTextNode('0'))
Dirichlet_options.appendChild(boundary_value6)
variable.appendChild(Dirichlet_options)
microenvironment_setup.appendChild(variable)
# Microenvironment Setup > Options
options2 = xml_file.createElement('options')
calculate_gradients = xml_file.createElement('calculate_gradients')
calculate_gradients.appendChild(xml_file.createTextNode('true'))
options2.appendChild(calculate_gradients)
track_internalized_substrates_in_each_agent = xml_file.createElement('track_internalized_substrates_in_each_agent')
track_internalized_substrates_in_each_agent.appendChild(xml_file.createTextNode('true'))
options2.appendChild(track_internalized_substrates_in_each_agent)
initial_condition = xml_file.createElement('initial_condition')
initial_condition.setAttribute('type','matlab')
initial_condition.setAttribute('enabled','false')
filename = xml_file.createElement('filename')
filename.appendChild(xml_file.createTextNode('./config/initial.mat'))
initial_condition.appendChild(filename)
options2.appendChild(initial_condition)
dirichlet_nodes = xml_file.createElement('dirichlet_nodes')
dirichlet_nodes.setAttribute('type','matlab')
dirichlet_nodes.setAttribute('enabled','false')
filename2 = xml_file.createElement('filename')
filename2.appendChild(xml_file.createTextNode('./config/dirichlet.mat'))
dirichlet_nodes.appendChild(filename2)
options2.appendChild(dirichlet_nodes)
microenvironment_setup.appendChild(options2)
physicell_settings.appendChild(microenvironment_setup)

#7) Cell Definitions
cell_definitions = xml_file.createElement('cell_definitions')
# Cell Definitions > Cell Definition (cancer cell)
cell_definition = xml_file.createElement('cell_definition')
cell_definition.setAttribute('name','cancer_cell')
cell_definition.setAttribute('ID','0')
# Cell Definition > Phenotype
phenotype = xml_file.createElement('phenotype')
# Cell Definition > Phenotype > Cycle
cycle = xml_file.createElement('cycle')
cycle.setAttribute('code','5')
cycle.setAttribute('name','live')
phase_durations = xml_file.createElement('phase_durations')
phase_durations.setAttribute('units','min')
duration = xml_file.createElement('duration')
duration.setAttribute('index','0')
duration.setAttribute('fixed_duration','false')
duration.appendChild(xml_file.createTextNode('300.0'))
phase_durations.appendChild(duration)
cycle.appendChild(phase_durations)
phenotype.appendChild(cycle)
# Cell Definition > Phenotype > Death
death = xml_file.createElement('death')
# Cell Definition > Phenotype > Death > Model
model = xml_file.createElement('model')
model.setAttribute('code','100')
model.setAttribute('name','apoptosis')
death_rate = xml_file.createElement('death_rate')
death_rate.setAttribute('units','1/min')
death_rate.appendChild(xml_file.createTextNode('5.31667e-05'))
model.appendChild(death_rate)
phase_durations = xml_file.createElement('phase_durations')
phase_durations.setAttribute('units','min')
duration2 = xml_file.createElement('duration')
duration2.setAttribute('index','0')
duration2.setAttribute('fixed_duration','true')
duration2.appendChild(xml_file.createTextNode('516'))
phase_durations.appendChild(duration2)
model.appendChild(phase_durations)
# Cell Definition > Phenotype > Death > Parameters
parameters = xml_file.createElement('parameters')
unlysed_fluid_change_rate = xml_file.createElement('unlysed_fluid_change_rate')
unlysed_fluid_change_rate.setAttribute('units','1/min')
unlysed_fluid_change_rate.appendChild(xml_file.createTextNode('0.05'))
parameters.appendChild(unlysed_fluid_change_rate)
lysed_fluid_change_rate = xml_file.createElement('lysed_fluid_change_rate')
lysed_fluid_change_rate.setAttribute('units','1/min')
lysed_fluid_change_rate.appendChild(xml_file.createTextNode('0'))
parameters.appendChild(lysed_fluid_change_rate)
cytoplasmic_biomass_change_rate = xml_file.createElement('cytoplasmic_biomass_change_rate')
cytoplasmic_biomass_change_rate.setAttribute('units','1/min')
cytoplasmic_biomass_change_rate.appendChild(xml_file.createTextNode('1.66667e-02'))
parameters.appendChild(cytoplasmic_biomass_change_rate)
nuclear_biomass_change_rate = xml_file.createElement('nuclear_biomass_change_rate')
nuclear_biomass_change_rate.setAttribute('units','1/min')
nuclear_biomass_change_rate.appendChild(xml_file.createTextNode('5.83333e-03'))
parameters.appendChild(nuclear_biomass_change_rate)
calcification_rate = xml_file.createElement('calcification_rate')
calcification_rate.setAttribute('units','1/min')
calcification_rate.appendChild(xml_file.createTextNode('0'))
parameters.appendChild(calcification_rate)
relative_rupture_volume = xml_file.createElement('relative_rupture_volume')
relative_rupture_volume.setAttribute('units','dimensionless')
relative_rupture_volume.appendChild(xml_file.createTextNode('2.0'))
parameters.appendChild(relative_rupture_volume)
model.appendChild(parameters)
death.appendChild(model)
# Cell Definition > Phenotype > Death > Model2
model2 = xml_file.createElement('model')
model2.setAttribute('code','101')
model2.setAttribute('name','necrosis')
death_rate2 = xml_file.createElement('death_rate')
death_rate2.setAttribute('units','1/min')
death_rate2.appendChild(xml_file.createTextNode('0.0'))
model2.appendChild(death_rate2)
phase_durations2 = xml_file.createElement('phase_durations')
phase_durations2.setAttribute('units','min')
duration3 = xml_file.createElement('duration')
duration3.setAttribute('index','0')
duration3.setAttribute('fixed_duration','true')
duration3.appendChild(xml_file.createTextNode('0'))
phase_durations2.appendChild(duration3)
duration4 = xml_file.createElement('duration')
duration4.setAttribute('index','1')
duration4.setAttribute('fixed_duration','true')
duration4.appendChild(xml_file.createTextNode('86400'))
phase_durations2.appendChild(duration4)
model2.appendChild(phase_durations2)
parameters2 = xml_file.createElement('parameters')
unlysed_fluid_change_rate2 = xml_file.createElement('unlysed_fluid_change_rate')
unlysed_fluid_change_rate2.setAttribute('units','1/min')
unlysed_fluid_change_rate2.appendChild(xml_file.createTextNode('0.05'))
parameters2.appendChild(unlysed_fluid_change_rate2)
lysed_fluid_change_rate2 = xml_file.createElement('lysed_fluid_change_rate')
lysed_fluid_change_rate2.setAttribute('units','1/min')
lysed_fluid_change_rate2.appendChild(xml_file.createTextNode('0'))
parameters2.appendChild(lysed_fluid_change_rate2)
cytoplasmic_biomass_change_rate2 = xml_file.createElement('cytoplasmic_biomass_change_rate')
cytoplasmic_biomass_change_rate2.setAttribute('units','1/min')
cytoplasmic_biomass_change_rate2.appendChild(xml_file.createTextNode('1.66667e-02'))
parameters2.appendChild(cytoplasmic_biomass_change_rate2)
nuclear_biomass_change_rate2 = xml_file.createElement('nuclear_biomass_change_rate')
nuclear_biomass_change_rate2.setAttribute('units','1/min')
nuclear_biomass_change_rate2.appendChild(xml_file.createTextNode('5.83333e-03'))
parameters2.appendChild(nuclear_biomass_change_rate2)
calcification_rate2 = xml_file.createElement('calcification_rate')
calcification_rate2.setAttribute('units','1/min')
calcification_rate2.appendChild(xml_file.createTextNode('0'))
parameters2.appendChild(calcification_rate2)
relative_rupture_volume2 = xml_file.createElement('relative_rupture_volume')
relative_rupture_volume2.setAttribute('units','dimensionless')
relative_rupture_volume2.appendChild(xml_file.createTextNode('2.0'))
parameters2.appendChild(relative_rupture_volume2)
model2.appendChild(parameters2)
death.appendChild(model2)
phenotype.appendChild(death)
# Cell Definition > Phenotype > Volume
volume = xml_file.createElement('volume')
total = xml_file.createElement('total')
total.setAttribute('units','micron^3')
total.appendChild(xml_file.createTextNode('2494'))
volume.appendChild(total)
fluid_fraction = xml_file.createElement('fluid_fraction')
fluid_fraction.setAttribute('units','dimensionless')
fluid_fraction.appendChild(xml_file.createTextNode('0.75'))
volume.appendChild(fluid_fraction)
nuclear = xml_file.createElement('nuclear')
nuclear.setAttribute('units','micron^3')
nuclear.appendChild(xml_file.createTextNode('540'))
volume.appendChild(nuclear)
fluid_change_rate = xml_file.createElement('fluid_change_rate')
fluid_change_rate.setAttribute('units','1/min')
fluid_change_rate.appendChild(xml_file.createTextNode('0.05'))
volume.appendChild(fluid_change_rate)
cytoplasmic_biomass_change_rate3 = xml_file.createElement('cytoplasmic_biomass_change_rate')
cytoplasmic_biomass_change_rate3.setAttribute('units','1/min')
cytoplasmic_biomass_change_rate3.appendChild(xml_file.createTextNode('0.0045'))
volume.appendChild(cytoplasmic_biomass_change_rate3)
nuclear_biomass_change_rate3 = xml_file.createElement('nuclear_biomass_change_rate')
nuclear_biomass_change_rate3.setAttribute('units','1/min')
nuclear_biomass_change_rate3.appendChild(xml_file.createTextNode('0.0055'))
volume.appendChild(nuclear_biomass_change_rate3)
calcified_fraction = xml_file.createElement('calcified_fraction')
calcified_fraction.setAttribute('units','dimensionless')
calcified_fraction.appendChild(xml_file.createTextNode('0'))
volume.appendChild(calcified_fraction)
calcification_rate3 = xml_file.createElement('calcification_rate')
calcification_rate3.setAttribute('units','1/min')
calcification_rate3.appendChild(xml_file.createTextNode('0'))
volume.appendChild(calcification_rate3)
relative_rupture_volume3 = xml_file.createElement('relative_rupture_volume')
relative_rupture_volume3.setAttribute('units','dimensionless')
relative_rupture_volume3.appendChild(xml_file.createTextNode('2.0'))
volume.appendChild(relative_rupture_volume3)
phenotype.appendChild(volume)
# Cell Definition > Phenotype > Mechanics
mechanics = xml_file.createElement('mechanics')
cell_cell_adhesion_strength = xml_file.createElement('cell_cell_adhesion_strength')
cell_cell_adhesion_strength.setAttribute('units','micron/min')
cell_cell_adhesion_strength.appendChild(xml_file.createTextNode('0.4'))
mechanics.appendChild(cell_cell_adhesion_strength)
cell_cell_repulsion_strength = xml_file.createElement('cell_cell_repulsion_strength')
cell_cell_repulsion_strength.setAttribute('units','micron/min')
cell_cell_repulsion_strength.appendChild(xml_file.createTextNode('10.0'))
mechanics.appendChild(cell_cell_repulsion_strength)
relative_maximum_adhesion_distance = xml_file.createElement('relative_maximum_adhesion_distance')
relative_maximum_adhesion_distance.setAttribute('units','dimensionless')
relative_maximum_adhesion_distance.appendChild(xml_file.createTextNode('1.25'))
mechanics.appendChild(relative_maximum_adhesion_distance)
cell_adhesion_affinities = xml_file.createElement('cell_adhesion_affinities')
cell_adhesion_affinity = xml_file.createElement('cell_adhesion_affinity')
cell_adhesion_affinity.setAttribute('name','cancer_cell')
cell_adhesion_affinity.appendChild(xml_file.createTextNode('1'))
cell_adhesion_affinities.appendChild(cell_adhesion_affinity)
cell_adhesion_affinity2 = xml_file.createElement('cell_adhesion_affinity')
cell_adhesion_affinity2.setAttribute('name','endothelial')
cell_adhesion_affinity2.appendChild(xml_file.createTextNode('1.0'))
cell_adhesion_affinities.appendChild(cell_adhesion_affinity2)
mechanics.appendChild(cell_adhesion_affinities)
options3 = xml_file.createElement('options')
set_relative_equilibrium_distance = xml_file.createElement('set_relative_equilibrium_distance')
set_relative_equilibrium_distance.setAttribute('enabled','false')
set_relative_equilibrium_distance.setAttribute('units','dimensionless')
set_relative_equilibrium_distance.appendChild(xml_file.createTextNode('1.8'))
options3.appendChild(set_relative_equilibrium_distance)
set_absolute_equilibrium_distance = xml_file.createElement('set_absolute_equilibrium_distance')
set_absolute_equilibrium_distance.setAttribute('enabled','false')
set_absolute_equilibrium_distance.setAttribute('units','micron')
set_absolute_equilibrium_distance.appendChild(xml_file.createTextNode('15.12'))
options3.appendChild(set_absolute_equilibrium_distance)
mechanics.appendChild(options3)
cell_BM_adhesion_strength = xml_file.createElement('cell_BM_adhesion_strength')
cell_BM_adhesion_strength.setAttribute('units','micron/min')
cell_BM_adhesion_strength.appendChild(xml_file.createTextNode('4.0'))
mechanics.appendChild(cell_BM_adhesion_strength)
cell_BM_repulsion_strength = xml_file.createElement('cell_BM_repulsion_strength')
cell_BM_repulsion_strength.setAttribute('units','micron/min')
cell_BM_repulsion_strength.appendChild(xml_file.createTextNode('10.0'))
mechanics.appendChild(cell_BM_repulsion_strength)
attachment_elastic_constant = xml_file.createElement('attachment_elastic_constant')
attachment_elastic_constant.setAttribute('units','1/min')
attachment_elastic_constant.appendChild(xml_file.createTextNode('0.01'))
mechanics.appendChild(attachment_elastic_constant)
attachment_rate = xml_file.createElement('attachment_rate')
attachment_rate.setAttribute('units','1/min')
attachment_rate.appendChild(xml_file.createTextNode('10.0'))
mechanics.appendChild(attachment_rate)
detachment_rate = xml_file.createElement('detachment_rate')
detachment_rate.setAttribute('units','1/min')
detachment_rate.appendChild(xml_file.createTextNode('0.0'))
mechanics.appendChild(detachment_rate)
phenotype.appendChild(mechanics)
# Cell Definition > Phenotype > Motility
motility = xml_file.createElement('motility')
speed = xml_file.createElement('speed')
speed.setAttribute('units','micron/min')
speed.appendChild(xml_file.createTextNode('1'))
motility.appendChild(speed)
persistence_time = xml_file.createElement('persistence_time')
persistence_time.setAttribute('units','min')
persistence_time.appendChild(xml_file.createTextNode('1'))
motility.appendChild(persistence_time)
migration_bias = xml_file.createElement('migration_bias')
migration_bias.setAttribute('units','dimensionless')
migration_bias.appendChild(xml_file.createTextNode('.5'))
motility.appendChild(migration_bias)
options4 = xml_file.createElement('options')
enabled2 = xml_file.createElement('enabled')
enabled2.appendChild(xml_file.createTextNode('false'))
options4.appendChild(enabled2)
use_2D2 = xml_file.createElement('use_2D')
use_2D2.appendChild(xml_file.createTextNode('false'))
options4.appendChild(use_2D2)
chemotaxis = xml_file.createElement('chemotaxis')
enabled3 = xml_file.createElement('enabled')
enabled3.appendChild(xml_file.createTextNode('false'))
chemotaxis.appendChild(enabled3)
substrate = xml_file.createElement('substrate')
substrate.appendChild(xml_file.createTextNode('oxygen'))
chemotaxis.appendChild(substrate)
direction = xml_file.createElement('direction')
direction.appendChild(xml_file.createTextNode('1'))
chemotaxis.appendChild(direction)
options4.appendChild(chemotaxis)
advanced_chemotaxis = xml_file.createElement('advanced_chemotaxis')
enabled4 = xml_file.createElement('enabled')
enabled4.appendChild(xml_file.createTextNode('false'))
advanced_chemotaxis.appendChild(enabled4)
normalize_each_gradient = xml_file.createElement('normalize_each_gradient')
normalize_each_gradient.appendChild(xml_file.createTextNode('false'))
advanced_chemotaxis.appendChild(normalize_each_gradient)
chemotactic_sensitivities = xml_file.createElement('chemotactic_sensitivities')
chemotactic_sensitivity = xml_file.createElement('chemotactic_sensitivity')
chemotactic_sensitivity.setAttribute('substrate','substrate')
chemotactic_sensitivity.appendChild(xml_file.createTextNode('0.0'))
chemotactic_sensitivities.appendChild(chemotactic_sensitivity)
chemotactic_sensitivity2 = xml_file.createElement('chemotactic_sensitivity')
chemotactic_sensitivity2.setAttribute('substrate','oxygen')
chemotactic_sensitivity2.appendChild(xml_file.createTextNode('0.0'))
chemotactic_sensitivities.appendChild(chemotactic_sensitivity2)
advanced_chemotaxis.appendChild(chemotactic_sensitivities)
options4.appendChild(advanced_chemotaxis)
motility.appendChild(options4)
phenotype.appendChild(motility)
# Cell Definition > Phenotype > Secretion
secretion = xml_file.createElement('secretion')
substrate2 = xml_file.createElement('substrate')
substrate2.setAttribute('name','oxygen')
secretion_rate = xml_file.createElement('secretion_rate')
secretion_rate.setAttribute('units','1/min')
secretion_rate.appendChild(xml_file.createTextNode('0'))
substrate2.appendChild(secretion_rate)
secretion_target = xml_file.createElement('secretion_target')
secretion_target.setAttribute('units','substrate density')
secretion_target.appendChild(xml_file.createTextNode('1'))
substrate2.appendChild(secretion_target)
uptake_rate = xml_file.createElement('uptake_rate')
uptake_rate.setAttribute('units','1/min')
uptake_rate.appendChild(xml_file.createTextNode('0.1'))
substrate2.appendChild(uptake_rate)
net_export_rate = xml_file.createElement('net_export_rate')
net_export_rate.setAttribute('units','total substrate/min')
net_export_rate.appendChild(xml_file.createTextNode('0'))
substrate2.appendChild(net_export_rate)
secretion.appendChild(substrate2)
phenotype.appendChild(secretion)
# Cell Definition > Phenotype > Cell Interactions
cell_interactions = xml_file.createElement('cell_interactions')
dead_phagocytosis_rate = xml_file.createElement('dead_phagocytosis_rate')
dead_phagocytosis_rate.setAttribute('units','1/min')
dead_phagocytosis_rate.appendChild(xml_file.createTextNode('0'))
cell_interactions.appendChild(dead_phagocytosis_rate)
live_phagocytosis_rates = xml_file.createElement('live_phagocytosis_rates')
phagocytosis_rate = xml_file.createElement('phagocytosis_rate')
phagocytosis_rate.setAttribute('name','cancer_cell')
phagocytosis_rate.setAttribute('units','1/min')
phagocytosis_rate.appendChild(xml_file.createTextNode('0'))
live_phagocytosis_rates.appendChild(phagocytosis_rate)
phagocytosis_rate2 = xml_file.createElement('phagocytosis_rate')
phagocytosis_rate2.setAttribute('name','endothelial')
phagocytosis_rate2.setAttribute('units','1/min')
phagocytosis_rate2.appendChild(xml_file.createTextNode('0.0'))
live_phagocytosis_rates.appendChild(phagocytosis_rate2)
cell_interactions.appendChild(live_phagocytosis_rates)
attack_rates = xml_file.createElement('attack_rates')
attack_rate = xml_file.createElement('attack_rate')
attack_rate.setAttribute('name','cancer_cell')
attack_rate.setAttribute('units','1/min')
attack_rate.appendChild(xml_file.createTextNode('0'))
attack_rates.appendChild(attack_rate)
attack_rate2 = xml_file.createElement('attack_rate')
attack_rate2.setAttribute('name','endothelial')
attack_rate2.setAttribute('units','1/min')
attack_rate2.appendChild(xml_file.createTextNode('0.0'))
attack_rates.appendChild(attack_rate2)
cell_interactions.appendChild(attack_rates)
damage_rate = xml_file.createElement('damage_rate')
damage_rate.setAttribute('units','1/min')
damage_rate.appendChild(xml_file.createTextNode('1'))
cell_interactions.appendChild(damage_rate)
fusion_rates = xml_file.createElement('fusion_rates')
fusion_rate = xml_file.createElement('fusion_rate')
fusion_rate.setAttribute('name','cancer_cell')
fusion_rate.setAttribute('units','1/min')
fusion_rate.appendChild(xml_file.createTextNode('0'))
fusion_rates.appendChild(fusion_rate)
fusion_rate2 = xml_file.createElement('fusion_rate')
fusion_rate2.setAttribute('name','endothelial')
fusion_rate2.setAttribute('units','1/min')
fusion_rate2.appendChild(xml_file.createTextNode('0.0'))
fusion_rates.appendChild(fusion_rate2)
cell_interactions.appendChild(fusion_rates)
phenotype.appendChild(cell_interactions)
# Cell Definition > Phenotype > Cell Transformations
cell_transformations = xml_file.createElement('cell_transformations')
transformation_rates = xml_file.createElement('transformation_rates')
transformation_rate = xml_file.createElement('transformation_rate')
transformation_rate.setAttribute('name','cancer_cell')
transformation_rate.setAttribute('units','1/min')
transformation_rate.appendChild(xml_file.createTextNode('0'))
transformation_rates.appendChild(transformation_rate)
transformation_rate2 = xml_file.createElement('transformation_rate')
transformation_rate2.setAttribute('name','endothelial')
transformation_rate2.setAttribute('units','1/min')
transformation_rate2.appendChild(xml_file.createTextNode('0.0'))
transformation_rates.appendChild(transformation_rate2)
cell_transformations.appendChild(transformation_rates)
phenotype.appendChild(cell_transformations)
cell_definition.appendChild(phenotype)
# Cell Definition > Custom Data
custom_data = xml_file.createElement('custom_data')
sample = xml_file.createElement('sample')
sample.setAttribute('units','dimensionless')
sample.setAttribute('conserved','false')
sample.setAttribute('description','')
sample.appendChild(xml_file.createTextNode('1.0'))
custom_data.appendChild(sample)
cell_definition.appendChild(custom_data)
cell_definitions.appendChild(cell_definition)

# Cell Definition > Cell Definition (endothelial)
cell_definition2 = xml_file.createElement('cell_definition')
cell_definition2.setAttribute('name','endothelial')
cell_definition2.setAttribute('ID','1')
# Cell Definition > Phenotype
phenotype2 = xml_file.createElement('phenotype')
# Cell Definition > Phenotype > Cycle
cycle2 = xml_file.createElement('cycle')
cycle2.setAttribute('code','5')
cycle2.setAttribute('name','live')
phase_transition_rates = xml_file.createElement('phase_transition_rates')
phase_transition_rates.setAttribute('units','1/min')
rate = xml_file.createElement('rate')
rate.setAttribute('start_index','0')
rate.setAttribute('end_index','0')
rate.setAttribute('fixed_duration','true')
rate.appendChild(xml_file.createTextNode('0.0'))
phase_transition_rates.appendChild(rate)
cycle2.appendChild(phase_transition_rates)
phenotype2.appendChild(cycle2)
# Cell Definition > Phenotype > Death
death2 = xml_file.createElement('death')
# Cell Definition > Phenotype > Death > Model
model1 = xml_file.createElement('model')
model1.setAttribute('code','100')
model1.setAttribute('name','apoptosis')
death_rate1 = xml_file.createElement('death_rate')
death_rate1.setAttribute('units','1/min')
death_rate1.appendChild(xml_file.createTextNode('0.0'))
model1.appendChild(death_rate1)
phase_durations1 = xml_file.createElement('phase_durations')
phase_durations1.setAttribute('units','min')
duration1 = xml_file.createElement('duration')
duration1.setAttribute('index','0')
duration1.setAttribute('fixed_duration','false')
duration1.appendChild(xml_file.createTextNode('1.e9'))
phase_durations1.appendChild(duration1)
model1.appendChild(phase_durations1)
# Cell Definition > Phenotype > Death > Parameters
parameters1 = xml_file.createElement('parameters')
unlysed_fluid_change_rate1 = xml_file.createElement('unlysed_fluid_change_rate')
unlysed_fluid_change_rate1.setAttribute('units','1/min')
unlysed_fluid_change_rate1.appendChild(xml_file.createTextNode('0.0'))
parameters1.appendChild(unlysed_fluid_change_rate1)
lysed_fluid_change_rate0 = xml_file.createElement('lysed_fluid_change_rate')
lysed_fluid_change_rate0.setAttribute('units','1/min')
lysed_fluid_change_rate0.appendChild(xml_file.createTextNode('0.0'))
parameters1.appendChild(lysed_fluid_change_rate0)
cytoplasmic_biomass_change_rate1 = xml_file.createElement('cytoplasmic_biomass_change_rate')
cytoplasmic_biomass_change_rate1.setAttribute('units','1/min')
cytoplasmic_biomass_change_rate1.appendChild(xml_file.createTextNode('0.0'))
parameters1.appendChild(cytoplasmic_biomass_change_rate1)
nuclear_biomass_change_rate1 = xml_file.createElement('nuclear_biomass_change_rate')
nuclear_biomass_change_rate1.setAttribute('units','1/min')
nuclear_biomass_change_rate1.appendChild(xml_file.createTextNode('0.0'))
parameters1.appendChild(nuclear_biomass_change_rate1)
calcification_rate1 = xml_file.createElement('calcification_rate')
calcification_rate1.setAttribute('units','1/min')
calcification_rate1.appendChild(xml_file.createTextNode('0.0'))
parameters1.appendChild(calcification_rate1)
relative_rupture_volume1 = xml_file.createElement('relative_rupture_volume')
relative_rupture_volume1.setAttribute('units','dimensionless')
relative_rupture_volume1.appendChild(xml_file.createTextNode('0.0'))
parameters1.appendChild(relative_rupture_volume1)
model1.appendChild(parameters1)
death2.appendChild(model1)
# Cell Definition > Phenotype > Death > Model2
model0 = xml_file.createElement('model')
model0.setAttribute('code','101')
model0.setAttribute('name','necrosis')
death_rate0 = xml_file.createElement('death_rate')
death_rate0.setAttribute('units','1/min')
death_rate0.appendChild(xml_file.createTextNode('0.0'))
model0.appendChild(death_rate0)
phase_durations3 = xml_file.createElement('phase_durations')
phase_durations3.setAttribute('units','min')
duration5 = xml_file.createElement('duration')
duration5.setAttribute('index','0')
duration5.setAttribute('fixed_duration','false')
duration5.appendChild(xml_file.createTextNode('1.e9'))
phase_durations3.appendChild(duration5)
duration6 = xml_file.createElement('duration')
duration6.setAttribute('index','1')
duration6.setAttribute('fixed_duration','false')
duration6.appendChild(xml_file.createTextNode('1.e9'))
phase_durations3.appendChild(duration6)
model0.appendChild(phase_durations3)
parameters3 = xml_file.createElement('parameters')
unlysed_fluid_change_rate3 = xml_file.createElement('unlysed_fluid_change_rate')
unlysed_fluid_change_rate3.setAttribute('units','1/min')
unlysed_fluid_change_rate3.appendChild(xml_file.createTextNode('0.0'))
parameters3.appendChild(unlysed_fluid_change_rate3)
lysed_fluid_change_rate3 = xml_file.createElement('lysed_fluid_change_rate')
lysed_fluid_change_rate3.setAttribute('units','1/min')
lysed_fluid_change_rate3.appendChild(xml_file.createTextNode('0.0'))
parameters3.appendChild(lysed_fluid_change_rate3)
cytoplasmic_biomass_change_rate4 = xml_file.createElement('cytoplasmic_biomass_change_rate')
cytoplasmic_biomass_change_rate4.setAttribute('units','1/min')
cytoplasmic_biomass_change_rate4.appendChild(xml_file.createTextNode('0.0'))
parameters3.appendChild(cytoplasmic_biomass_change_rate4)
nuclear_biomass_change_rate4 = xml_file.createElement('nuclear_biomass_change_rate')
nuclear_biomass_change_rate4.setAttribute('units','1/min')
nuclear_biomass_change_rate4.appendChild(xml_file.createTextNode('0.0'))
parameters3.appendChild(nuclear_biomass_change_rate4)
calcification_rate4 = xml_file.createElement('calcification_rate')
calcification_rate4.setAttribute('units','1/min')
calcification_rate4.appendChild(xml_file.createTextNode('0.0'))
parameters3.appendChild(calcification_rate4)
relative_rupture_volume4 = xml_file.createElement('relative_rupture_volume')
relative_rupture_volume4.setAttribute('units','dimensionless')
relative_rupture_volume4.appendChild(xml_file.createTextNode('0.0'))
parameters3.appendChild(relative_rupture_volume4)
model0.appendChild(parameters3)
death2.appendChild(model0)
phenotype2.appendChild(death2)
# Cell Definitions > Phenotype > Volume
volume2 = xml_file.createElement('volume')
total2 = xml_file.createElement('total')
total2.setAttribute('units','micron^3')
total2.appendChild(xml_file.createTextNode('1000'))
volume2.appendChild(total2)
fluid_fraction2 = xml_file.createElement('fluid_fraction')
fluid_fraction2.setAttribute('units','dimensionless')
fluid_fraction2.appendChild(xml_file.createTextNode('0.75'))
volume2.appendChild(fluid_fraction2)
nuclear2 = xml_file.createElement('nuclear')
nuclear2.setAttribute('units','micron^3')
nuclear2.appendChild(xml_file.createTextNode('540'))
volume2.appendChild(nuclear2)
fluid_change_rate2 = xml_file.createElement('fluid_change_rate')
fluid_change_rate2.setAttribute('units','1/min')
fluid_change_rate2.appendChild(xml_file.createTextNode('0.0'))
volume2.appendChild(fluid_change_rate2)
cytoplasmic_biomass_change_rate5 = xml_file.createElement('cytoplasmic_biomass_change_rate')
cytoplasmic_biomass_change_rate5.setAttribute('units','1/min')
cytoplasmic_biomass_change_rate5.appendChild(xml_file.createTextNode('0.0'))
volume2.appendChild(cytoplasmic_biomass_change_rate5)
nuclear_biomass_change_rate5 = xml_file.createElement('nuclear_biomass_change_rate')
nuclear_biomass_change_rate5.setAttribute('units','1/min')
nuclear_biomass_change_rate5.appendChild(xml_file.createTextNode('0.0'))
volume2.appendChild(nuclear_biomass_change_rate5)
calcified_fraction2 = xml_file.createElement('calcified_fraction')
calcified_fraction2.setAttribute('units','dimensionless')
calcified_fraction2.appendChild(xml_file.createTextNode('0.0'))
volume2.appendChild(calcified_fraction2)
calcification_rate5 = xml_file.createElement('calcification_rate')
calcification_rate5.setAttribute('units','1/min')
calcification_rate5.appendChild(xml_file.createTextNode('0.0'))
volume2.appendChild(calcification_rate5)
relative_rupture_volume5 = xml_file.createElement('relative_rupture_volume')
relative_rupture_volume5.setAttribute('units','dimensionless')
relative_rupture_volume5.appendChild(xml_file.createTextNode('0.0'))
volume2.appendChild(relative_rupture_volume5)
phenotype2.appendChild(volume2)
# Cell Definitions > Phenotype > Mechanics
mechanics2 = xml_file.createElement('mechanics')
cell_cell_adhesion_strength2 = xml_file.createElement('cell_cell_adhesion_strength')
cell_cell_adhesion_strength2.setAttribute('units','micron/min')
cell_cell_adhesion_strength2.appendChild(xml_file.createTextNode('0.0'))
mechanics2.appendChild(cell_cell_adhesion_strength2)
cell_cell_repulsion_strength2 = xml_file.createElement('cell_cell_repulsion_strength')
cell_cell_repulsion_strength2.setAttribute('units','micron/min')
cell_cell_repulsion_strength2.appendChild(xml_file.createTextNode('0'))
mechanics2.appendChild(cell_cell_repulsion_strength2)
relative_maximum_adhesion_distance2 = xml_file.createElement('relative_maximum_adhesion_distance')
relative_maximum_adhesion_distance2.setAttribute('units','dimensionless')
relative_maximum_adhesion_distance2.appendChild(xml_file.createTextNode('1.25'))
mechanics2.appendChild(relative_maximum_adhesion_distance2)
cell_adhesion_affinities2 = xml_file.createElement('cell_adhesion_affinities')
cell_adhesion_affinity3 = xml_file.createElement('cell_adhesion_affinity')
cell_adhesion_affinity3.setAttribute('name','cancer_cell')
cell_adhesion_affinity3.appendChild(xml_file.createTextNode('1.0'))
cell_adhesion_affinities2.appendChild(cell_adhesion_affinity3)
cell_adhesion_affinity4 = xml_file.createElement('cell_adhesion_affinity')
cell_adhesion_affinity4.setAttribute('name','endothelial')
cell_adhesion_affinity4.appendChild(xml_file.createTextNode('1.0'))
cell_adhesion_affinities2.appendChild(cell_adhesion_affinity4)
mechanics2.appendChild(cell_adhesion_affinities2)
options5 = xml_file.createElement('options')
set_relative_equilibrium_distance2 = xml_file.createElement('set_relative_equilibrium_distance')
set_relative_equilibrium_distance2.setAttribute('enabled','false')
set_relative_equilibrium_distance2.setAttribute('units','dimensionless')
set_relative_equilibrium_distance2.appendChild(xml_file.createTextNode('1.8'))
options5.appendChild(set_relative_equilibrium_distance2)
set_absolute_equilibrium_distance2 = xml_file.createElement('set_absolute_equilibrium_distance')
set_absolute_equilibrium_distance2.setAttribute('enabled','false')
set_absolute_equilibrium_distance2.setAttribute('units','micron')
set_absolute_equilibrium_distance2.appendChild(xml_file.createTextNode('15.12'))
options5.appendChild(set_absolute_equilibrium_distance2)
mechanics2.appendChild(options5)
cell_BM_adhesion_strength2 = xml_file.createElement('cell_BM_adhesion_strength')
cell_BM_adhesion_strength2.setAttribute('units','micron/min')
cell_BM_adhesion_strength2.appendChild(xml_file.createTextNode('4.0'))
mechanics2.appendChild(cell_BM_adhesion_strength2)
cell_BM_repulsion_strength2 = xml_file.createElement('cell_BM_repulsion_strength')
cell_BM_repulsion_strength2.setAttribute('units','micron/min')
cell_BM_repulsion_strength2.appendChild(xml_file.createTextNode('10.0'))
mechanics2.appendChild(cell_BM_repulsion_strength2)
attachment_elastic_constant2 = xml_file.createElement('attachment_elastic_constant')
attachment_elastic_constant2.setAttribute('units','1/min')
attachment_elastic_constant2.appendChild(xml_file.createTextNode('0.01'))
mechanics2.appendChild(attachment_elastic_constant2)
attachment_rate2 = xml_file.createElement('attachment_rate')
attachment_rate2.setAttribute('units','1/min')
attachment_rate2.appendChild(xml_file.createTextNode('10.0'))
mechanics2.appendChild(attachment_rate2)
detachment_rate2 = xml_file.createElement('detachment_rate')
detachment_rate2.setAttribute('units','1/min')
detachment_rate2.appendChild(xml_file.createTextNode('0.0'))
mechanics2.appendChild(detachment_rate2)
phenotype2.appendChild(mechanics2)
# Cell Definitions > Phenotype > Motility
motility2 = xml_file.createElement('motility')
speed2 = xml_file.createElement('speed')
speed2.setAttribute('units','micron/min')
speed2.appendChild(xml_file.createTextNode('0.0'))
motility2.appendChild(speed2)
persistence_time2 = xml_file.createElement('persistence_time')
persistence_time2.setAttribute('units','min')
persistence_time2.appendChild(xml_file.createTextNode('0.0'))
motility2.appendChild(persistence_time2)
migration_bias2 = xml_file.createElement('migration_bias')
migration_bias2.setAttribute('units','dimensionless')
migration_bias2.appendChild(xml_file.createTextNode('0.0'))
motility2.appendChild(migration_bias2)
options6 = xml_file.createElement('options')
enabled5 = xml_file.createElement('enabled')
enabled5.appendChild(xml_file.createTextNode('false'))
options6.appendChild(enabled5)
use_2D3 = xml_file.createElement('use_2D')
use_2D3.appendChild(xml_file.createTextNode('true'))
options6.appendChild(use_2D3)
chemotaxis2 = xml_file.createElement('chemotaxis')
enabled6 = xml_file.createElement('enabled')
enabled6.appendChild(xml_file.createTextNode('false'))
chemotaxis2.appendChild(enabled6)
substrate3 = xml_file.createElement('substrate')
substrate3.appendChild(xml_file.createTextNode('oxygen'))
chemotaxis2.appendChild(substrate3)
direction2 = xml_file.createElement('direction')
direction2.appendChild(xml_file.createTextNode('1'))
chemotaxis2.appendChild(direction2)
options6.appendChild(chemotaxis2)
advanced_chemotaxis2 = xml_file.createElement('advanced_chemotaxis')
enabled7 = xml_file.createElement('enabled')
enabled7.appendChild(xml_file.createTextNode('false'))
advanced_chemotaxis2.appendChild(enabled7)
normalize_each_gradient2 = xml_file.createElement('normalize_each_gradient')
normalize_each_gradient2.appendChild(xml_file.createTextNode('false'))
advanced_chemotaxis2.appendChild(normalize_each_gradient2)
chemotactic_sensitivities2 = xml_file.createElement('chemotactic_sensitivities')
chemotactic_sensitivity3 = xml_file.createElement('chemotactic_sensitivity')
chemotactic_sensitivity3.setAttribute('substrate','substrate')
chemotactic_sensitivity3.appendChild(xml_file.createTextNode('0.0'))
chemotactic_sensitivities2.appendChild(chemotactic_sensitivity3)
chemotactic_sensitivity4 = xml_file.createElement('chemotactic_sensitivity')
chemotactic_sensitivity4.setAttribute('substrate','oxygen')
chemotactic_sensitivity4.appendChild(xml_file.createTextNode('0.0'))
chemotactic_sensitivities2.appendChild(chemotactic_sensitivity4)
advanced_chemotaxis2.appendChild(chemotactic_sensitivities2)
options6.appendChild(advanced_chemotaxis2)
motility2.appendChild(options6)
phenotype2.appendChild(motility2)
# Cell Definitions > Phenotype > Secretion
secretion2 = xml_file.createElement('secretion')
substrate3 = xml_file.createElement('substrate')
substrate3.setAttribute('name','oxygen')
secretion_rate2 = xml_file.createElement('secretion_rate')
secretion_rate2.setAttribute('units','1/min')
secretion_rate2.appendChild(xml_file.createTextNode('0.0'))
substrate3.appendChild(secretion_rate2)
secretion_target2 = xml_file.createElement('secretion_target')
secretion_target2.setAttribute('units','substrate density')
secretion_target2.appendChild(xml_file.createTextNode('1.0'))
substrate3.appendChild(secretion_target2)
uptake_rate2 = xml_file.createElement('uptake_rate')
uptake_rate2.setAttribute('units','1/min')
uptake_rate2.appendChild(xml_file.createTextNode('0.0'))
substrate3.appendChild(uptake_rate2)
net_export_rate2 = xml_file.createElement('net_export_rate')
net_export_rate2.setAttribute('units','total substrate/min')
net_export_rate2.appendChild(xml_file.createTextNode('0.0'))
substrate3.appendChild(net_export_rate2)
secretion2.appendChild(substrate3)
phenotype2.appendChild(secretion2)
# Cell Definitions > Phenotype > Cell Interactions
cell_interactions2 = xml_file.createElement('cell_interactions')
dead_phagocytosis_rate2 = xml_file.createElement('dead_phagocytosis_rate')
dead_phagocytosis_rate2.setAttribute('units','1/min')
dead_phagocytosis_rate2.appendChild(xml_file.createTextNode('0.0'))
cell_interactions2.appendChild(dead_phagocytosis_rate2)
live_phagocytosis_rates2 = xml_file.createElement('live_phagocytosis_rates')
phagocytosis_rate3 = xml_file.createElement('phagocytosis_rate')
phagocytosis_rate3.setAttribute('name','cancer_cell')
phagocytosis_rate3.setAttribute('units','1/min')
phagocytosis_rate3.appendChild(xml_file.createTextNode('0.0'))
live_phagocytosis_rates2.appendChild(phagocytosis_rate3)
phagocytosis_rate4 = xml_file.createElement('phagocytosis_rate')
phagocytosis_rate4.setAttribute('name','endothelial')
phagocytosis_rate4.setAttribute('units','1/min')
phagocytosis_rate4.appendChild(xml_file.createTextNode('0.0'))
live_phagocytosis_rates2.appendChild(phagocytosis_rate4)
cell_interactions2.appendChild(live_phagocytosis_rates2)
attack_rates2 = xml_file.createElement('attack_rates')
attack_rate3 = xml_file.createElement('attack_rate')
attack_rate3.setAttribute('name','cancer_cell')
attack_rate3.setAttribute('units','1/min')
attack_rate3.appendChild(xml_file.createTextNode('0.0'))
attack_rates2.appendChild(attack_rate3)
attack_rate4 = xml_file.createElement('attack_rate')
attack_rate4.setAttribute('name','endothelial')
attack_rate4.setAttribute('units','1/min')
attack_rate4.appendChild(xml_file.createTextNode('0.0'))
attack_rates2.appendChild(attack_rate4)
cell_interactions2.appendChild(attack_rates2)
damage_rate2 = xml_file.createElement('damage_rate')
damage_rate2.setAttribute('units','1/min')
damage_rate2.appendChild(xml_file.createTextNode('1.0'))
cell_interactions2.appendChild(damage_rate2)
fusion_rates2 = xml_file.createElement('fusion_rates')
fusion_rate3 = xml_file.createElement('fusion_rate')
fusion_rate3.setAttribute('name','cancer_cell')
fusion_rate3.setAttribute('units','1/min')
fusion_rate3.appendChild(xml_file.createTextNode('0.0'))
fusion_rates2.appendChild(fusion_rate3)
fusion_rate4 = xml_file.createElement('fusion_rate')
fusion_rate4.setAttribute('name','endothelial')
fusion_rate4.setAttribute('units','1/min')
fusion_rate4.appendChild(xml_file.createTextNode('0.0'))
fusion_rates2.appendChild(fusion_rate4)
cell_interactions2.appendChild(fusion_rates2)
phenotype2.appendChild(cell_interactions2)
# Cell Definitions > Phenotype > Cell Transformations
cell_transformations2 = xml_file.createElement('cell_transformations')
transformation_rates2 = xml_file.createElement('transformation_rates')
transformation_rate3 = xml_file.createElement('transformation_rate')
transformation_rate3.setAttribute('name','cancer_cell')
transformation_rate3.setAttribute('units','1/min')
transformation_rate3.appendChild(xml_file.createTextNode('0.0'))
transformation_rates2.appendChild(transformation_rate3)
transformation_rate4 = xml_file.createElement('transformation_rate')
transformation_rate4.setAttribute('name','endothelial')
transformation_rate4.setAttribute('units','1/min')
transformation_rate4.appendChild(xml_file.createTextNode('0.0'))
transformation_rates2.appendChild(transformation_rate4)
cell_transformations2.appendChild(transformation_rates2)
phenotype2.appendChild(cell_transformations2)
cell_definition2.appendChild(phenotype2)
# Cell Definitions > Custom Data
custom_data2 = xml_file.createElement('custom_data')
sample2 = xml_file.createElement('sample')
sample2.setAttribute('units','dimensionless')
sample2.setAttribute('conserved','false')
sample2.setAttribute('description','')
sample2.appendChild(xml_file.createTextNode('1.0'))
custom_data2.appendChild(sample2)
cell_definition2.appendChild(custom_data2)
cell_definitions.appendChild(cell_definition2)

physicell_settings.appendChild(cell_definitions)

#8) Initial Conditions
initial_conditions = xml_file.createElement('initial_conditions')
cell_positions = xml_file.createElement('cell_positions')
cell_positions.setAttribute('type','cvs')
cell_positions.setAttribute('enabled','false')
folder2 = xml_file.createElement('folder')
folder2.appendChild(xml_file.createTextNode('./config'))
cell_positions.appendChild(folder2)
filename3 = xml_file.createElement('filename')
filename3.appendChild(xml_file.createTextNode('cells.csv'))
cell_positions.appendChild(filename3)
initial_conditions.appendChild(cell_positions)
physicell_settings.appendChild(initial_conditions)


#8) User Parameters
user_parameters = xml_file.createElement('user_parameters')
random_seed = xml_file.createElement('random_seed')
random_seed.setAttribute('type','int')
random_seed.setAttribute('units','dimensionless')
random_seed.setAttribute('description','')
random_seed.appendChild(xml_file.createTextNode('0'))
user_parameters.appendChild(random_seed)
number_of_cells = xml_file.createElement('number_of_cells')
number_of_cells.setAttribute('type','int')
number_of_cells.setAttribute('units','none')
number_of_cells.setAttribute('description','initial number of cells (for each cell type)')
number_of_cells.appendChild(xml_file.createTextNode('10'))
user_parameters.appendChild(number_of_cells)

cyl_x0 = xml_file.createElement('cyl_x0')
cyl_x0.setAttribute('type','double')
cyl_x0.setAttribute('units','')
cyl_x0.setAttribute('description','')
cyl_x0.appendChild(xml_file.createTextNode('-20'))
user_parameters.appendChild(cyl_x0)
cyl_x1 = xml_file.createElement('cyl_x1')
cyl_x1.setAttribute('type','double')
cyl_x1.setAttribute('units','')
cyl_x1.setAttribute('description','')
cyl_x1.appendChild(xml_file.createTextNode('20'))
user_parameters.appendChild(cyl_x1)
cyl_radius = xml_file.createElement('cyl_radius')
cyl_radius.setAttribute('type','double')
cyl_radius.setAttribute('units','')
cyl_radius.setAttribute('description','')
cyl_radius.appendChild(xml_file.createTextNode('5'))
user_parameters.appendChild(cyl_radius)

#Loop for 3 vessels in User Parameters
scale_factor = 1000 #10000 for cm to micron, 1000 for mm to micron
v = len(data[:,1])
print(v)
for i in range(0,v):
    file='vessel_{}'.format(i+1)
    file = xml_file.createElement('vessel_{}'.format(i+1))
    file.setAttribute('type','string')
    file.setAttribute('units','')
    file.setAttribute('description','')
    string = round(data[i,3]*scale_factor),round(data[i,4]*scale_factor),round(data[i,5]*scale_factor),round(data[i,0]*scale_factor),round(data[i,1]*scale_factor),round(data[i,2]*scale_factor),round(data[i,21]*scale_factor)
    file.appendChild(xml_file.createTextNode(str(string)[1:-1].replace(' ','')))
    user_parameters.appendChild(file)

#Set x,y,z min,max based on vessels
x_min_val = round(1.1*min(min(data[:,0]*scale_factor), min(data[:,3]*scale_factor)))
x_min.appendChild(xml_file.createTextNode(str(x_min_val)))
x_max_val = round(1.1*max(max(data[:,0]*scale_factor), max(data[:,3]*scale_factor)))
x_max.appendChild(xml_file.createTextNode(str(x_max_val)))
y_min_val = round(1.1*min(min(data[:,1]*scale_factor), min(data[:,4]*scale_factor)))
y_min.appendChild(xml_file.createTextNode(str(y_min_val)))
y_max_val = round(1.1*max(max(data[:,1]*scale_factor), max(data[:,4]*scale_factor)))
y_max.appendChild(xml_file.createTextNode(str(y_max_val)))
z_min_val = round(1.1*min(min(data[:,2]*scale_factor), min(data[:,5]*scale_factor)))
z_min.appendChild(xml_file.createTextNode(str(z_min_val)))
z_max_val = round(1.1*max(max(data[:,2]*scale_factor), max(data[:,5]*scale_factor)))
z_max.appendChild(xml_file.createTextNode(str(z_max_val)))


"""for i in range(0,3):
    user_parameters.appendChild(xml_file.createTextNode('Vessel {}'.format(i+1)))
    cyl_x0 = xml_file.createElement('cyl_x0')
    cyl_x0.setAttribute('type','double')
    cyl_x0.setAttribute('units','micron')
    cyl_x0.setAttribute('description','x proximal point')
    cyl_x0.appendChild(xml_file.createTextNode(str(data[i,0]*10000)))
    user_parameters.appendChild(cyl_x0)
    cyl_x1 = xml_file.createElement('cyl_x1')
    cyl_x1.setAttribute('type','double')
    cyl_x1.setAttribute('units','micron')
    cyl_x1.setAttribute('description','x distal point')
    cyl_x1.appendChild(xml_file.createTextNode(str(data[i,3]*10000)))
    user_parameters.appendChild(cyl_x1)
    cyl_x2 = xml_file.createElement('cyl_x2')
    cyl_x2.setAttribute('type','double')
    cyl_x2.setAttribute('units','micron')
    cyl_x2.setAttribute('description','y proximal point')
    cyl_x2.appendChild(xml_file.createTextNode(str(data[i,1]*10000)))
    user_parameters.appendChild(cyl_x2)
    cyl_x3 = xml_file.createElement('cyl_x3')
    cyl_x3.setAttribute('type','double')
    cyl_x3.setAttribute('units','micron')
    cyl_x3.setAttribute('description','y distal point')
    cyl_x3.appendChild(xml_file.createTextNode(str(data[i,4]*10000)))
    user_parameters.appendChild(cyl_x3)
    cyl_x4 = xml_file.createElement('cyl_x4')
    cyl_x4.setAttribute('type','double')
    cyl_x4.setAttribute('units','micron')
    cyl_x4.setAttribute('description','z proximal point')
    cyl_x4.appendChild(xml_file.createTextNode(str(data[i,2]*10000)))
    user_parameters.appendChild(cyl_x4)
    cyl_x5 = xml_file.createElement('cyl_x5')
    cyl_x5.setAttribute('type','double')
    cyl_x5.setAttribute('units','micron')
    cyl_x5.setAttribute('description','z distal point')
    cyl_x5.appendChild(xml_file.createTextNode(str(data[i,5]*10000)))
    user_parameters.appendChild(cyl_x5)
    cyl_length = xml_file.createElement('cyl_length')
    cyl_length.setAttribute('type','double')
    cyl_length.setAttribute('units','micron')
    cyl_length.setAttribute('description','')
    cyl_length.appendChild(xml_file.createTextNode(str(data[i,20]*10000)))
    user_parameters.appendChild(cyl_length)
    cyl_radius = xml_file.createElement('cyl_radius')
    cyl_radius.setAttribute('type','double')
    cyl_radius.setAttribute('units','micron')
    cyl_radius.setAttribute('description','')
    cyl_radius.appendChild(xml_file.createTextNode(str(data[i,21]*10000)))
    user_parameters.appendChild(cyl_radius)
    cyl_flow = xml_file.createElement('cyl_flow')
    cyl_flow.setAttribute('type','double')
    cyl_flow.setAttribute('units','mL/sec')
    cyl_flow.setAttribute('description','')
    cyl_flow.appendChild(xml_file.createTextNode(str(data[i,22])))
    user_parameters.appendChild(cyl_flow)"""


physicell_settings.appendChild(user_parameters)

print(xml_file.toprettyxml(indent='\t'))

fname = "test.xml"
file = open(fname, "w+")
xml_file.writexml(file, indent='\t', addindent='\t', newl='\n')
file.close()
